<!-- ================================================ -->
<!--  Laszlo app intercommunication sample (Server)   -->
<!--                                                  -->
<!--  example of how to use AJAX and a Servlet to     -->
<!--  communicate between two Laszlo applications     -->
<!--  running in different browsers or even possibly  -->
<!--  on separate machines                            -->
<!--                                                  -->
<!--  Author: Peter Krenesky                          -->
<!--  Date: Aug 1, 2006                               -->
<!-- ================================================ -->
<canvas debug="false" oninit="initServer();" height="768" width="1360">
    <!--debug width="400" height="300" x="200" y="500" fontsize="10"/-->

    <include href="lib/lzx/updatingView.lzx"/>
    <include href="lib/lzx/updatingViewFrame.lzx"/>
    <include href="lib/lzx/mrtgWindow.lzx"/>
    <include href="lib/lzx/borderedBox.lzx"/>
    <include href="lib/lzx/scrollingText.lzx"/>
    <include href="lib/lzx/scrollingBox.lzx"/>

    <font name="default" src="helmetr.ttf"/>
    <resource name="cursor" src="lib/images/hiddenCursor.gif"/>
    
    <attribute name="screenContainer"/>

    <method name="initServer" >
        canvas.connection.connect();
        slideShowInit();
        var resetDelegate = new LzDelegate(canvas, "reset");
        LzTimer.resetTimer(resetDelegate,4000);
        this.showNextDelegate = new LzDelegate(canvas, "showCurrentSlide");
        for (var screen in canvas.screenContainer) {
            canvas.screenContainer[screen].hide();
        }
        //init hidden cursor
        LzCursor.setCursorGlobal('cursor');
        canvas.cursorToggleDel = new LzDelegate(this, "toggleCursor");
        LzKeys.callOnKeyCombo(canvas.cursorToggleDel, ["c"]);


        Debug.write("Display initialized");
    </method>

    <resource name="bgimage" src="lib/images/background-gray-1x768.gif"/>
    <view name="background" resource="bgimage" width="1360" height="768" stretches="width"/>

    <!-- ================================================= -->
    <!--   Cursor hide/show                                -->
    <!-- ================================================= -->
    <attribute name="cursorToggleDel"/>
    <attribute name="cursorShown" type="boolean" value="false"/>
    <method name="toggleCursor">
        if (canvas.cursorShown) {
            LzCursor.setCursorGlobal('cursor');
        } else {
            LzCursor.unlock();
        }
        canvas.cursorShown = !canvas.cursorShown;
    </method>

    <!-- ================================================= -->
    <!--   Connection and Messaging                        -->
    <!-- ================================================= -->
    <include href="lib/lzx/connection.lzx" />
    <connectiondatasource name="mycd">
        <dataset name="command" />
    </connectiondatasource>
    <datapointer xpath="mycd:command:/*">
        <!-- called when command is received, currently just -->
        <!-- calls method with same name as command -->
        <handler name="ondata">
            <![CDATA[

            //Debug.write("receiving command");
            //stop slideshow
            canvas.slideshow=false;
            LzTimer.removeTimer(canvas.showNextSlideDelegate);

            //get and parse the command
            var raw = this.xpathQuery('/text()');

            //split string into an array
            canvas.commandParams = raw.split(",");

            //create delegate for the function we want to call
            var deltest = new LzDelegate(eval(canvas.commandParams[0]), canvas.commandParams[1]);

            //Debug.write("context: " + canvas.commandParams[0] + "   command: " + canvas.commandParams[1]   +  "  eval: " + eval(canvas.commandParams[0]) + "   del: " + deltest );

            //execute the function
            deltest.execute();

            ]]>
        </handler>
        <method event="onerror">
            Debug.write("problems contacting server");
        </method>

        <method event="ontimeout">
            Debug.write("server time out");
        </method>
    </datapointer>
    <!-- variable for storing params in case they are needed by the function being called -->
    <attribute name="commandParams" />

    <!-- ================================================= -->
    <!--   Show / Hide screen functionality                -->
    <!-- ================================================= -->
    <attribute name="currentSlide" />
    <attribute name="currentScreen" />
    <attribute name="showNextDelegate" />
    <method name="showSlideCommand" >
        this.showSlide(eval(canvas.commandParams[2]));
    </method>
    <method name="showSlide" args="newSlide">
        Debug.write("showing slide? " + !currentSlide.shown);
        if (newSlide != currentSlide || !currentSlide.shown) {
            var hidetime = canvas.currentSlide.hide();
            canvas.currentSlide = newSlide;
            Debug.write("showing slide: " + newSlide);
            if(!hidetime){
                hidetime = 1000
            }
            LzTimer.resetTimer(showNextDelegate, hidetime);
        }
    </method>
    <method name="showCurrentSlide">
        canvas.currentSlide.show();
    </method>

    <!-- ================================================= -->
    <!--   Slide Show functionality                        -->
    <!-- ================================================= -->
    <attribute name="currentSlideIndex" type="number" value="-1"/>
    <attribute name="showNextSlideDelegate" />
    <attribute name="slideshow" type="boolean" value="true"/>

    <method name="showNextSlideLoop">
        if(slideshow) {
            this.showNextSlide();
            LzTimer.resetTimer(canvas.showNextSlideDelegate, canvas.currentSlide.duration);
        }
    </method>
    <!-- hides the current slide and then shows the next one -->
    <method name="showNextSlide">
        var nextSlide = getNextSlide();
        while (!nextSlide.slideshow) {
            nextSlide = getNextSlide();
        }
        //Debug.write("nextSlide: " + nextSlide);
        showSlide(nextSlide);

    </method>
    <method name="showPrevSlide">
        var nextSlide = getPrevSlide();
        while (!nextSlide.slideshow) {
            nextSlide = getPrevSlide();
        }
        //Debug.write("prevSlide: " + nextSlide);
        showSlide(nextSlide);
    </method>
    <!-- gets the next slide that should be shown -->
    <method name="getNextSlide">
        if (currentSlideIndex+1 == canvas.screenContainer.length) {
            canvas.currentSlideIndex = 0;
        } else {
            canvas.currentSlideIndex = currentSlideIndex + 1;
        }
        Debug.write("getting slide: " + canvas.screenContainer[canvas.currentSlideIndex].id);
        return canvas.screenContainer[canvas.currentSlideIndex];
    </method>
    <!-- gets the next (previous) slide that should be shown -->
    <method name="getPrevSlide">
        if (currentSlideIndex == 0) {
            canvas.currentSlideIndex = canvas.screenContainer.length-1;
        } else {
            canvas.currentSlideIndex = currentSlideIndex - 1;
        }
        return canvas.screenContainer[canvas.currentSlideIndex];
    </method>
    <method name="slideShowInit">
        canvas.showNextSlideDelegate = new LzDelegate(canvas, "showNextSlideLoop" );
        currentSlideIndex=-1;
        canvas.currentSlide = getNextSlide();
        Debug.write("first slide: " + canvas.currentSlide.id);
    </method>

    <method name="reset">
        canvas.slideshow=true;
        showNextSlideLoop();
    </method>
    <!-- ================================================= -->
    <!--   Slide Show Commands                             -->
    <!-- ================================================= -->
    <method name="slideShowPrev">
        this.showPrevSlide();
    </method>

    <method name="slideShowStop">
        //do nothing its already stopped;
    </method>

    <method name="slideShowPlay">
        this.reset();
    </method>

    <method name="slideShowNext">
        this.showNextSlide();
    </method>

    <!-- ================================================= -->
    <!--   Screens that make up the display.  Screens      -->
    <!--   must be in the view screenContainer for them to -->
    <!--   to be registered for the slide show and         -->
    <!--   autohide.                                       -->
    <!-- ================================================= -->
    <include href="lib/lzx/screen.lzx" />

    <!-- FTP User Map -->
    <dataset type="http" name="dset_ftpUserMap"
             src="http://ftp-osl.osuosl.org:8000/">
    </dataset>
    <datapointer xpath="dset_ftpUserMap:/rss/channel" rerunxpath="true">
        <method event="ondata">
            var label = this.xpathQuery('item[1]/title/text()');
            var lat = this.xpathQuery('item[2]/title/text()');
            var lon = this.xpathQuery('item[3]/title/text()');
            screen_osl_ftpusersmap.createPoint(lat,lon, label);
            label = null;
            lat = null;
            lon = null;
        </method>
    </datapointer>
    <include href="lib/lzx/circle.lzx"/>
    <include href="lib/lzx/ping.lzx"/>
    <include href="lib/lzx/ftpUserPoint.lzx"/>
    <resource name="ftpusermap" src="screens/ftpmap/map_1360nolabel.png"/>
    <include href="screens/ftpmap/ftpusersmap.lzx"/>

    <!-- donors -->
    <dataset name="dset_sponsors" request="true" src="screens/osl_sponsors/personalDonations.xml"/>
    <include href="screens/osl_sponsors/osl_sponsors.lzx"/>

    <!-- Advisories and Outages -->
    <dataset name="nagios" request="true" src="http://larch.osuosl.org:8000/"/>
    <dataset name="glsa" request="true" src="http://www.gentoo.org/rdf/en/glsa-index.rdf"/>
    <dataset name="dsa" request="true" src="http://www.debian.org/security/dsa"/>
    <dataset name="rt" request="true" secureport="4443" type="http" src="https://support.osuosl.org:4443/rt/Search/Results.rdf?Order=DESC&amp;Query=Owner%20%3D%20'Nobody'%20AND%20(%20Status%20%3D%20'new'%20OR%20Status%20%3D%20'open')&amp;Rows=50&amp;OrderBy=Priority&amp;Page=1&amp;Format=&amp;user=bigscreen&amp;pass=4r3e2w1q0p9o8i7u"/> -->
    <include href="screens/osl_outages.lzx"/>

    <!-- OSL_ABOUT -->
    <resource name="edray" src="screens/osl_about/EdRay.png"/>
    <include href="screens/osl_about/osl-about.lzx"/>

    <!-- WEATHER -->
    <dataset name="dset_weatherData" request="true" src="http://xoap.weather.com/weather/local/USOR0076?cc=*&amp;dayf=5&amp;prod=xoap&amp;par=1003666583&amp;key=4128909340a9b2fc"/>
    <include href="screens/weather/weather.lzx"/>

    <!-- NEWS -->
    <dataset name="dset_barometer" request="true" src="http://barometer.orst.edu/articles.rss"/>
    <dataset name="dset_oregonian" request="true" src="http://www.blogs.oregonlive.com/community/feeds/rss.asp?cat=2151"/>
    <dataset name="dset_slashdot" request="true" src="http://rss.slashdot.org/Slashdot/slashdot"/>
    <dataset name="dset_planetosl" request="true" src="http://osuosl.org/aggregator/rss/1"/>
    <include href="screens/news.lzx"/>

    <!-- WEBCAMS -->
    <include href="screens/webcams/webcam.lzx"/>
    <include href="screens/webcams/webcams.lzx"/>

    <!-- OTHER STUFF -->
    <include href="screens/osl_bandwidth/general.lzx"/>
    <include href="screens/osl_bandwidth/projects.lzx"/>
    <include href="screens/rackview.lzx"/>

    <!-- NET STUFF -->
    <include href="screens/net_about/net_about.lzx"/>
    <include href="screens/net_bandwidth.lzx"/>
    <include href="screens/net_wifi_usage.lzx"/>
    <include href="screens/net_wifi_bandwidth.lzx"/>


    <!-- ftp bandwidth map -->
    <include href="screens/ftpbandwidth/ftpbandwidth.lzx"/>

    <resource name="oracle_logo" src="screens/oracle_welcome/oracle.png"/>
    <include href="screens/oracle_welcome/oracle_welcome.lzx"/>

    <view align="center" valign="middle" name="content"/>

</canvas>

