<screen id="screen_osl_ftpusersmap" duration="60000" x="0" y="0">

    <view name='background' bgcolor="0x154459" width="1360" height="768" opacity="0.0"/>

    <attribute name="currentPointIndex" type="number" value="0"/>
    <attribute name="maxPoints" type="number" value="500"/>
    <attribute name="points" />
    <attribute name="updateMapDelegate" />
    <attribute name="mapRefresh" type="number" value="1000" />
    <attribute name="scrollDeleteDelegate"/>

    <method name="_init">
        this.points = new Array();
        this.updateMapDelegate = new LzDelegate(this, "updateMap" );
        this.scrollDeleteDelegate = new LzDelegate(this, "deleteFirstScrollLabel" );
        LzTimer.resetTimer(this.updateMapDelegate, 3000);        
        this.currentPointIndex = -1;
    </method>

    <method name="updateMap">        
        dset_ftpUserMap.doRequest();
        if (this.running){        
            LzTimer.resetTimer(this.updateMapDelegate, this.mapRefresh);
        }
    </method>
    
    <method name="createPoint" args="lat, lon, label">
        <![CDATA[
        var remove = null;

        //change the last point created to a different color and explicitly
        //destroy its ping in case it did not destroy itself.
        if (this.currentPointIndex != -1) {
            remove = this.currentPointIndex - 5;
            if (remove < 0) {
                remove = this.maxPoints - 1 + remove;
            }
            if ( this.points[remove] ) {
                this.points[remove].animate("fgcolor", "0xE55E00", 100);                
            }
        }

        // determine what array index is being used. increment to the
        // end of the array and then start at the beginning.
        this.currentPointIndex = this.currentPointIndex + 1;
        if (this.currentPointIndex >= this.maxPoints ){
            this.currentPointIndex = 0;
        }

        // destroy the old point in this index if there is one
        if (this.points[this.currentPointIndex]) {
            this.points[this.currentPointIndex].destroy();
        }

        // create a new point
        this.points[this.currentPointIndex] = new FtpUserPoint(this.map);
        this.points[this.currentPointIndex].lon = lon;
        this.points[this.currentPointIndex].lat = lat;
        this.points[this.currentPointIndex].updatePosition();

        // create a scrolling label for the new point
        this.map.locationBox.scroller.addRow(label);        

        //cleanup
        textBlock = null;
        remove = null;
        ]]>
    </method>

    <method name="deleteFirstScrollLabel">
            // after subnode[0] is destroyed it is removed
            // from the array automatically. The array is then
            // automatically shifted so that subnode[1] is now
            // subnode[0]
            this.map.locationBox.container.subnodes[0].destroy();
        </method>

    <view name="map" resource="ftpusermap" >
        <borderedBox y="10" height="60" width="340" align="center" viewopacity="0.5">
            <text resize="true" fontsize="20" fgcolor="0xE55E00" align="center" y="6" font="default">A Sample of OSL Users</text>
            <text resize="true" fontsize="14" fgcolor="0xE55E00" align="center" y="33" font="default">where our users are currently downloading from</text>
        </borderedBox>
        <borderedBox name="locationBox" x="15" y="400" width="204" height="354" clip="false" viewopacity="0.5">
              <scrollingBox name="scroller" height="350" width="200" x="2" y="2" clip="true" rowheight="25" fgcolor="0xE55E00" fontsize="15" />
        </borderedBox>
    </view>

    <animatorgroup name="hideMap" process="sequential" start="false">        
        <animator attribute="opacity" to="0.0" duration="500" target="${parent.parent.map}"/>
        <animator attribute="opacity" to="0.0" duration="500" target="${parent.parent.background}"/>
        <animator attribute="y" to="-800" duration="0" target="${parent.parent.map}"/>
        <animator attribute="y" to="-800" duration="0" target="${parent.parent.background}"/>
    </animatorgroup>

    <animatorgroup name="showMap" process="sequential" start="false">
        <animator attribute="y" to="0" duration="0" target="${parent.parent.map}"/>
        <animator attribute="y" to="0" duration="0" target="${parent.parent.background}"/>
        <animator attribute="opacity" to="1.0" duration="500" target="${parent.parent.background}"/>
        <animator attribute="opacity" to="1.0" duration="500" target="${parent.parent.map}"/>
    </animatorgroup>

    <method name="_hide">
        this.hideMap.doStart();
        return 1500;
    </method>

    <method name="_show">        
        this.showMap.doStart();
        return 1500;
    </method>

    <method name="_start">
            LzTimer.resetTimer(this.updateMapDelegate, 1000);
    </method>

    <method name="_stop">
            LzTimer.removeTimer(this.updateMapDelegate);
    </method>

</screen>
